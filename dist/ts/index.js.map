{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/ts/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAC,MAAM,qBAAqB,CAAA;AAalD,mHAAmH;AACnH,SAAS,OAAO,CAAC,GAAiB;IACjC,IAAI,OAAO,GAAG,KAAK,QAAQ;QAAE,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAA;IAC/C,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IACvC,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,GAAG,CAAA;AAC1C,CAAC;AASD,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,UAAsB,EAAE;;IACrD,MAAM,MAAM,SAAG,OAAO,CAAC,MAAM,mCAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,cAAc,OAAO,CAAC,IAAI,IAAI,WAAW,OAAO,CAAA;IAE5G,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAE/B,uEAAuE;IACvE,MAAM,EACL,OAAO,EAAE,EAAC,IAAI,EAAE,WAAW,EAAC,GAC5B,GAAG,MAAM,cAAc,CAAa,MAAM,EAAE;QAC5C,GAAG,EAAE;YACJ,mEAAmE;YACnE,wBAAwB;YACxB,KAAK,CAAC,GAAW,EAAE,IAAY,EAAE,IAAY,EAAE,MAAc;gBAC5D,OAAO,CAAC,GAAG,CACV,QAAQ,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,EAC5C,SAAS,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,EAChD,SAAS,IAAI,IAAI,EACjB,QAAQ,MAAM,IAAI,CAClB,CAAA;YACF,CAAC;SACD;QACD,OAAO,EAAE;YACR,GAAG,CAAC,GAAW;gBACd,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAA;YACxD,CAAC;SACD;KACD,CAAC,CAAA;IAEF,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAC7B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,oBAAoB,EAAE,GAAG,GAAG,KAAK,CAAC,CAAA;IAE7D,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAChC,IAAI,EAAE,CAAA;IACN,MAAM,IAAI,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;IAC9B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,GAAG,YAAY,EAAE,IAAI,GAAG,MAAM,CAAC,CAAA;AACxD,CAAC","sourcesContent":["import {loadWasmModule} from './loadWasmModule.js'\n// import 'assemblyscript/std/portable'\n\n/// TODO this should probalbly be an interface with class to\ntype GlasModule = {\n\tmain(): void\n}\n\ntype RunOptions = {\n\tmode?: 'optimized' | 'untouched'\n\tmodule?: string // path to Wasm module file\n}\n\n/** Given a URL with slashes pointing to a file, the second to last part is considered to be the dir of the url. */\nfunction dirname(url: URL | string) {\n\tif (typeof url === 'string') url = new URL(url)\n\tconst folders = url.pathname.split('/')\n\treturn folders[folders.length - 2] || '/'\n}\n\n// FIXME The type for the `url` property of `import.meta` is missing.\ndeclare global {\n\tinterface ImportMeta {\n\t\turl: string\n\t}\n}\n\nexport async function runGlas(options: RunOptions = {}) {\n\tconst module = options.module ?? dirname(import.meta.url) + `../as/glas-${options.mode || 'optimized'}.wasm`\n\n\tconst start = performance.now()\n\n\t// this is currently broken, and we need a better way to test this out.\n\tconst {\n\t\texports: {main, __getString},\n\t} = await loadWasmModule<GlasModule>(module, {\n\t\tenv: {\n\t\t\t// this is called by `assert()`ions in the AssemblyScript std libs.\n\t\t\t// Useful for debugging.\n\t\t\tabort(msg: number, file: number, line: number, column: number) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`msg: ${(msg && __getString(msg)) || msg}\\n`,\n\t\t\t\t\t`file: ${(file && __getString(file)) || file}\\n`,\n\t\t\t\t\t`line: ${line}\\n`,\n\t\t\t\t\t`col: ${column}\\n`\n\t\t\t\t)\n\t\t\t},\n\t\t},\n\t\tconsole: {\n\t\t\tlog(msg: number) {\n\t\t\t\tconsole.log(`msg: ${(msg && __getString(msg)) || msg}`)\n\t\t\t},\n\t\t},\n\t})\n\n\tconst end = performance.now()\n\tconsole.log(options.mode + ' module load time:', end - start)\n\n\tconst start2 = performance.now()\n\tmain()\n\tconst end2 = performance.now()\n\tconsole.log(options.mode + ' run time:', end2 - start2)\n}\n"]}