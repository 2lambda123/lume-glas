{"version":3,"file":"loadWasmModule.js","sourceRoot":"","sources":["../../src/ts/loadWasmModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,iCAAiC,CAAA;AAC3D,qDAAqD;AAErD,qCAAqC;AACrC,iCAAiC;AAEjC,MAAM,CAAC,KAAK,UAAU,cAAc,CAAqC,IAAY,EAAE,OAAY;IAClG,OAAO,WAAW,CAAI,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAA;IAE3C,wCAAwC;IACxC,qCAAqC;IACrC,sFAAsF;IAEtF,wCAAwC;IACxC,qCAAqC;IACrC,8CAA8C;IAC9C,mEAAmE;IAEnE,wCAAwC;IACxC,qCAAqC;IACrC,8CAA8C;IAC9C,kDAAkD;IAClD,+DAA+D;IAC/D,kBAAkB;AACnB,CAAC","sourcesContent":["import {instantiate} from '@assemblyscript/loader/index.js'\n// import {instantiate} from '@assemblyscript/loader'\n\n// TODO get type defs for WebAssembly\n// declare const WebAssembly: any\n\nexport async function loadWasmModule<T extends Record<keyof T, unknown>>(file: string, imports: any) {\n\treturn instantiate<T>(fetch(file), imports)\n\n\t// ------------------ alternative method\n\t// const response = await fetch(file)\n\t// return (await WebAssembly.instantiateStreaming(response, imports)).instance.exports\n\n\t// ------------------ alternative method\n\t// const response = await fetch(file)\n\t// const buffer = await response.arrayBuffer()\n\t// return (await WebAssembly.instantiate(buffer, imports)).instance\n\n\t// ------------------ alternative method\n\t// const response = await fetch(file)\n\t// const buffer = await response.arrayBuffer()\n\t// const compiled = new WebAssembly.Module(buffer)\n\t// const instance = new WebAssembly.Instance(compiled, imports)\n\t// return instance\n}\n"]}